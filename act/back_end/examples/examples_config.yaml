# ACT Network Configuration - Diverse Verification Scenarios
# Direct layer specification aligned with layer_schema.py

generator:
  device: cpu
  output_dir: act/back_end/examples/nets
  include_metadata: true

networks:
  # ========================================================================
  # Scenario 1: TOP1_ROBUST - Classification Robustness Verification
  # ========================================================================
  
  mnist_robust_easy:
    description: "MNIST MLP with easy robustness (eps=0.01)"
    architecture_type: mlp
    input_shape: [1, 784]
    layers:
      - kind: INPUT
        params: {}
        meta: {shape: [1, 784], dtype: "torch.float64", desc: "MNIST input", dataset_name: "mnist", num_classes: 10, value_range: [0.0, 1.0]}
      - kind: INPUT_SPEC
        params: {}
        meta: {kind: "LINF_BALL", center_val: 0.5, eps: 0.01}
      - kind: DENSE
        params: {}
        meta: {in_features: 784, out_features: 64, bias_enabled: true}
      - kind: RELU
        params: {}
        meta: {}
      - kind: DENSE
        params: {}
        meta: {in_features: 64, out_features: 10, bias_enabled: true}
      - kind: ASSERT
        params: {}
        meta: {kind: "TOP1_ROBUST", y_true: 7}  # Verify class 7 has highest score

  mnist_robust_medium:
    description: "MNIST MLP with medium robustness (eps=0.05)"
    architecture_type: mlp
    input_shape: [1, 784]
    layers:
      - kind: INPUT
        params: {}
        meta: {shape: [1, 784], dtype: "torch.float64", desc: "MNIST input", dataset_name: "mnist", num_classes: 10, value_range: [0.0, 1.0]}
      - kind: INPUT_SPEC
        params: {}
        meta: {kind: "LINF_BALL", center_val: 0.5, eps: 0.05}
      - kind: DENSE
        params: {}
        meta: {in_features: 784, out_features: 32, bias_enabled: true}
      - kind: RELU
        params: {}
        meta: {}
      - kind: DENSE
        params: {}
        meta: {in_features: 32, out_features: 10, bias_enabled: true}
      - kind: ASSERT
        params: {}
        meta: {kind: "TOP1_ROBUST", y_true: 3}  # Verify class 3 has highest score

  mnist_robust_hard:
    description: "MNIST MLP with hard robustness (eps=0.15)"
    architecture_type: mlp
    input_shape: [1, 784]
    layers:
      - kind: INPUT
        params: {}
        meta: {shape: [1, 784], dtype: "torch.float64", desc: "MNIST input", dataset_name: "mnist", num_classes: 10, value_range: [0.0, 1.0]}
      - kind: INPUT_SPEC
        params: {}
        meta: {kind: "LINF_BALL", center_val: 0.5, eps: 0.15}
      - kind: DENSE
        params: {}
        meta: {in_features: 784, out_features: 16, bias_enabled: true}
      - kind: RELU
        params: {}
        meta: {}
      - kind: DENSE
        params: {}
        meta: {in_features: 16, out_features: 10, bias_enabled: true}
      - kind: ASSERT
        params: {}
        meta: {kind: "TOP1_ROBUST", y_true: 5}  # Verify class 5 has highest score

  # ========================================================================
  # Scenario 2: MARGIN_ROBUST - Classification with Safety Margins
  # ========================================================================
  
  cifar_margin_tight:
    description: "CIFAR-10 CNN with tight margin (0.1)"
    architecture_type: cnn
    input_shape: [1, 3, 32, 32]
    layers:
      - kind: INPUT
        params: {}
        meta: {shape: [1, 3, 32, 32], dtype: "torch.float64", desc: "CIFAR-10 input", dataset_name: "cifar10", num_classes: 10, value_range: [0.0, 1.0]}
      - kind: INPUT_SPEC
        params: {}
        meta: {kind: "BOX", lb_val: 0.0, ub_val: 1.0}
      - kind: CONV2D
        params: {}
        meta: {in_channels: 3, out_channels: 16, kernel_size: 3, padding: 1, input_shape: [1, 3, 32, 32], output_shape: [1, 16, 32, 32]}
      - kind: RELU
        params: {}
        meta: {}
      - kind: FLATTEN
        params: {}
        meta: {start_dim: 1}
      - kind: DENSE
        params: {}
        meta: {in_features: 16384, out_features: 10, bias_enabled: true}
      - kind: ASSERT
        params: {}
        meta: {kind: "MARGIN_ROBUST", y_true: 2, margin: 0.1}  # Verify class 2 exceeds others by 0.1

  cifar_margin_moderate:
    description: "CIFAR-10 CNN with moderate margin (0.5)"
    architecture_type: cnn
    input_shape: [1, 3, 32, 32]
    layers:
      - kind: INPUT
        params: {}
        meta: {shape: [1, 3, 32, 32], dtype: "torch.float64", desc: "CIFAR-10 input", dataset_name: "cifar10", num_classes: 10, value_range: [0.0, 1.0]}
      - kind: INPUT_SPEC
        params: {}
        meta: {kind: "BOX", lb_val: 0.0, ub_val: 1.0}
      - kind: CONV2D
        params: {}
        meta: {in_channels: 3, out_channels: 8, kernel_size: 3, padding: 1, input_shape: [1, 3, 32, 32], output_shape: [1, 8, 32, 32]}
      - kind: RELU
        params: {}
        meta: {}
      - kind: FLATTEN
        params: {}
        meta: {start_dim: 1}
      - kind: DENSE
        params: {}
        meta: {in_features: 8192, out_features: 10, bias_enabled: true}
      - kind: ASSERT
        params: {}
        meta: {kind: "MARGIN_ROBUST", y_true: 6, margin: 0.5}  # Verify class 6 exceeds others by 0.5

  cifar_margin_strict:
    description: "CIFAR-10 CNN with strict margin (1.0)"
    architecture_type: cnn
    input_shape: [1, 3, 32, 32]
    layers:
      - kind: INPUT
        params: {}
        meta: {shape: [1, 3, 32, 32], dtype: "torch.float64", desc: "CIFAR-10 input", dataset_name: "cifar10", num_classes: 10, value_range: [0.0, 1.0]}
      - kind: INPUT_SPEC
        params: {}
        meta: {kind: "BOX", lb_val: 0.0, ub_val: 1.0}
      - kind: CONV2D
        params: {}
        meta: {in_channels: 3, out_channels: 4, kernel_size: 3, padding: 1, input_shape: [1, 3, 32, 32], output_shape: [1, 4, 32, 32]}
      - kind: RELU
        params: {}
        meta: {}
      - kind: FLATTEN
        params: {}
        meta: {start_dim: 1}
      - kind: DENSE
        params: {}
        meta: {in_features: 4096, out_features: 10, bias_enabled: true}
      - kind: ASSERT
        params: {}
        meta: {kind: "MARGIN_ROBUST", y_true: 9, margin: 1.0}  # Verify class 9 exceeds others by 1.0

  # ========================================================================
  # Scenario 3: LINEAR_LE - Control System Verification
  # ========================================================================
  
  control_conservative:
    description: "Control system with conservative constraint"
    architecture_type: mlp
    input_shape: [1, 8]
    layers:
      - kind: INPUT
        params: {}
        meta: {shape: [1, 8], dtype: "torch.float64", desc: "Control state", dataset_name: "control", value_range: [-1.0, 1.0]}
      - kind: INPUT_SPEC
        params: {}
        meta: {kind: "BOX", lb_val: -1.0, ub_val: 1.0}
      - kind: DENSE
        params: {}
        meta: {in_features: 8, out_features: 16, bias_enabled: true}
      - kind: RELU
        params: {}
        meta: {}
      - kind: DENSE
        params: {}
        meta: {in_features: 16, out_features: 4, bias_enabled: true}
      - kind: ASSERT
        params: {c: [1.0, 1.0, 1.0, 1.0]}
        meta: {kind: "LINEAR_LE", d: 2.0}  # Verify sum of outputs <= 2.0

  control_balanced:
    description: "Control system with balanced constraint"
    architecture_type: mlp
    input_shape: [1, 8]
    layers:
      - kind: INPUT
        params: {}
        meta: {shape: [1, 8], dtype: "torch.float64", desc: "Control state", dataset_name: "control", value_range: [-1.0, 1.0]}
      - kind: INPUT_SPEC
        params: {}
        meta: {kind: "BOX", lb_val: -1.0, ub_val: 1.0}
      - kind: DENSE
        params: {}
        meta: {in_features: 8, out_features: 12, bias_enabled: true}
      - kind: TANH
        params: {}
        meta: {}
      - kind: DENSE
        params: {}
        meta: {in_features: 12, out_features: 4, bias_enabled: true}
      - kind: ASSERT
        params: {c: [0.5, 1.0, 1.0, 0.5]}
        meta: {kind: "LINEAR_LE", d: 3.0}  # Verify weighted sum <= 3.0

  control_strict:
    description: "Control system with strict constraint"
    architecture_type: mlp
    input_shape: [1, 8]
    layers:
      - kind: INPUT
        params: {}
        meta: {shape: [1, 8], dtype: "torch.float64", desc: "Control state", dataset_name: "control", value_range: [-1.0, 1.0]}
      - kind: INPUT_SPEC
        params: {}
        meta: {kind: "BOX", lb_val: -1.0, ub_val: 1.0}
      - kind: DENSE
        params: {}
        meta: {in_features: 8, out_features: 8, bias_enabled: true}
      - kind: TANH
        params: {}
        meta: {}
      - kind: DENSE
        params: {}
        meta: {in_features: 8, out_features: 4, bias_enabled: true}
      - kind: ASSERT
        params: {c: [2.0, 2.0, 2.0, 2.0]}
        meta: {kind: "LINEAR_LE", d: 1.0}  # Verify 2*sum <= 1.0

  # ========================================================================
  # Scenario 4: RANGE - Reachability Analysis
  # ========================================================================
  
  reachability_loose:
    description: "Reachability with loose bounds"
    architecture_type: mlp
    input_shape: [1, 6]
    layers:
      - kind: INPUT
        params: {}
        meta: {shape: [1, 6], dtype: "torch.float64", desc: "State space", dataset_name: "reachability", value_range: [0.0, 1.0]}
      - kind: INPUT_SPEC
        params: {}
        meta: {kind: "BOX", lb_val: 0.0, ub_val: 1.0}
      - kind: DENSE
        params: {}
        meta: {in_features: 6, out_features: 12, bias_enabled: true}
      - kind: RELU
        params: {}
        meta: {}
      - kind: DENSE
        params: {}
        meta: {in_features: 12, out_features: 3, bias_enabled: true}
      - kind: ASSERT
        params: {lb: [-5.0, -5.0, -5.0], ub: [5.0, 5.0, 5.0]}
        meta: {kind: "RANGE"}  # Verify outputs in [-5, 5]

  reachability_moderate:
    description: "Reachability with moderate bounds"
    architecture_type: mlp
    input_shape: [1, 6]
    layers:
      - kind: INPUT
        params: {}
        meta: {shape: [1, 6], dtype: "torch.float64", desc: "State space", dataset_name: "reachability", value_range: [0.0, 1.0]}
      - kind: INPUT_SPEC
        params: {}
        meta: {kind: "BOX", lb_val: 0.0, ub_val: 1.0}
      - kind: DENSE
        params: {}
        meta: {in_features: 6, out_features: 8, bias_enabled: true}
      - kind: TANH
        params: {}
        meta: {}
      - kind: DENSE
        params: {}
        meta: {in_features: 8, out_features: 3, bias_enabled: true}
      - kind: ASSERT
        params: {lb: [-2.0, -2.0, -2.0], ub: [2.0, 2.0, 2.0]}
        meta: {kind: "RANGE"}  # Verify outputs in [-2, 2]

  reachability_tight:
    description: "Reachability with tight bounds"
    architecture_type: mlp
    input_shape: [1, 6]
    layers:
      - kind: INPUT
        params: {}
        meta: {shape: [1, 6], dtype: "torch.float64", desc: "State space", dataset_name: "reachability", value_range: [0.0, 1.0]}
      - kind: INPUT_SPEC
        params: {}
        meta: {kind: "BOX", lb_val: 0.0, ub_val: 1.0}
      - kind: DENSE
        params: {}
        meta: {in_features: 6, out_features: 6, bias_enabled: true}
      - kind: TANH
        params: {}
        meta: {}
      - kind: DENSE
        params: {}
        meta: {in_features: 6, out_features: 3, bias_enabled: true}
      - kind: ASSERT
        params: {lb: [-0.5, -0.5, -0.5], ub: [0.5, 0.5, 0.5]}
        meta: {kind: "RANGE"}  # Verify outputs in [-0.5, 0.5]
